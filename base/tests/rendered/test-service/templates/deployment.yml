---
# Source: test-service/templates/deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-service
  namespace: "test"
  labels:
    app.kubernetes.io/name: test-service
    helm.sh/chart: test-service-0.0.0
    app.kubernetes.io/instance: test-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.0.0"
    app: test-service
  annotations:
    configmap-hash: 2d70606ffd1cb7ec3ac10d3fa2d55c7678f6bf706b3473421ddfb755bde70139
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: test-service
      app.kubernetes.io/instance: test-service
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        configmap-hash: 2d70606ffd1cb7ec3ac10d3fa2d55c7678f6bf706b3473421ddfb755bde70139
        vault.hashicorp.com/agent-cache-enable: "true"
        vault.hashicorp.com/agent-init-first: "true"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-pre-populate-only: "false"
        vault.hashicorp.com/agent-run-as-same-user: "true"
        vault.hashicorp.com/tls-skip-verify: "false"
        vault.hashicorp.com/role: "test-service"
        vault.hashicorp.com/agent-inject-command-mongodb-connection-string: |
          kill -TERM $(pgrep python)
        vault.hashicorp.com/agent-inject-secret-mongodb-connection-string: default-cluster-mongodb-mongodb/creds/test-service
        vault.hashicorp.com/agent-inject-template-mongodb-connection-string: |
          {{- with secret "default-cluster-mongodb-mongodb/creds/test-service" -}}
          export TEST_DB_URL="mongodb://{{username}}:{{password}}@mongodb:27017/admin"
          export TEST_DB_CONNECTION_STR=$TEST_DB_URL
          export TEST_MONGO_DSN=$TEST_DB_URL
          {{- end -}}
        vault.hashicorp.com/agent-inject-command-service-secrets: |
          kill -TERM $(pgrep python)
        vault.hashicorp.com/agent-inject-secret-service-secrets: operational-secrets/data/unique/apps/archive/default/overwritten-release-name
        vault.hashicorp.com/agent-inject-template-service-secrets: |
          {{ with secret "operational-secrets/data/unique/apps/archive/default/overwritten-release-name" -}}
          {{ if .Data.data }}{{- range $k, $v := .Data.data }}
          export TEST_{{ $k }}='{{ $v }}'
          {{- end }}{{- end }}{{- end }}
        vault.hashicorp.com/agent-inject-file-crypt4ghInternalPriv: /keys/crypt4gh-internal/crypt4gh.sec
        vault.hashicorp.com/agent-inject-template-crypt4ghInternalPriv: |
          {{ with secret "operational-secrets/data/shared/managed-keys/crypt4gh-internal" -}}
          {{ index .Data.data "crypt4gh.sec" }}
          {{- end }}
        vault.hashicorp.com/agent-inject-command-crypt4ghInternalPriv: |
          kill -TERM $(pgrep python)
        vault.hashicorp.com/agent-inject-secret-crypt4ghInternalPriv: operational-secrets/data/shared/managed-keys/crypt4gh-internal
        vault.hashicorp.com/agent-inject-file-crypt4ghExternalPriv: /keys/crypt4gh-external/crypt4gh.sec
        vault.hashicorp.com/agent-inject-template-crypt4ghExternalPriv: |
          {{ with secret "operational-secrets/data/shared/managed-keys/crypt4gh-external" -}}
          {{ index .Data.data "crypt4gh.sec" }}
          {{- end }}
        vault.hashicorp.com/agent-inject-command-crypt4ghExternalPriv: |
          kill -TERM $(pgrep python)
        vault.hashicorp.com/agent-inject-secret-crypt4ghExternalPriv: operational-secrets/data/shared/managed-keys/crypt4gh-external
        vault.hashicorp.com/agent-inject-command-ghga-auth-public: |
          kill -TERM $(pgrep python)
        vault.hashicorp.com/agent-inject-secret-ghga-auth-public: operational-secrets/data/shared/managed-keys/ghga-auth/public
        vault.hashicorp.com/agent-inject-template-ghga-auth-public: |
          {{ with secret "operational-secrets/data/shared/managed-keys/ghga-auth/public" -}}
          export TEST_AUTH_KEY='{{ index .Data.data "key" }}'
          {{- end }}
        helm.sh/revision: "1"
      labels:
        app.kubernetes.io/name: test-service
        helm.sh/chart: test-service-0.0.0
        app.kubernetes.io/instance: test-service
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "0.0.0"
        app: test-service
    spec:
      securityContext:
        fsGroup: 1000
      serviceAccountName: test-service
      
      shareProcessNamespace: true
      restartPolicy: Always
      enableServiceLinks: true
      containers:
        - image: docker.io/test:0.0.0
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          
          args:
            - if [ -d "/vault/secrets" ]; then
                for f in /vault/secrets/*; do
                  if [ -f "$f" ]; then
                    . "$f";
                  fi;
                done;
              fi;
              test;
          env:
            - name: TEST_CONFIG_YAML
              value: /etc/config.yaml
          name: test-service
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          readinessProbe:
            initialDelaySeconds: 30
            periodSeconds: 15
            tcpSocket:
              port: 8080
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 15
            tcpSocket:
              port: 8080
          resources:
            limits:
              cpu: 1500m
              memory: 2048M
            requests:
              cpu: 1000m
              memory: 1024M
          volumeMounts:
            - mountPath: /etc/config.yaml
              name: config
              readOnly: true
              subPath: config.yaml
            - mountPath: "/kafka-secrets/"
              name: kafka-secret
              readOnly: true
            - mountPath:  "/cluster-ca-cert/"
              name: cluster-ca-cert
              readOnly: true
      volumes:
        - configMap:
            items:
            - key: config
              path: config.yaml
            name: test-service
          name: config
        - name: kafka-secret
          secret:
            secretName: test-test-service
            optional: false
        - name: cluster-ca-cert
          secret:
            secretName: kafka-cluster-ca-cert
            optional: false      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: test-service
                    app.kubernetes.io/name: test-service
                topologyKey: kubernetes.io/hostname
              weight: 1
