exports:
  defaults:
    global:
      imageRegistry: ""
      imagePullSecrets: []
      storageClass: ""
      _topics: {}

    deployment:
      enabled: true

    job:
      enabled: false

    nameOverride: ""

    fullnameOverride: ""

    namespaceOverride: ""

    clusterDomain: cluster.local

    annotations: {}

    labels: {}

    commonLabels: {}

    commonAnnotations: {}

    image:
      registry: docker.io
      repository: ""
      tag: ""
      digest: ""
      pullPolicy: null
      pullSecrets: []

    replicaCount: 1

    revisionHistoryLimit: 1

    shareProcessNamespace: false

    podSecurityContext:
      enabled: false
      fsGroup: 0

    initContainers: []

    hostAliases: []

    podLabels: {}

    podAnnotations: {}

    podAffinityPreset: ""

    podAntiAffinityPreset: soft

    nodeAffinityPreset:
      type: ""
      key: ""
      values: []

    affinity: {}

    nodeSelector: {}

    tolerations: []

    topologySpreadConstraints: []

    priorityClassName: ""

    schedulerName: ""

    terminationGracePeriodSeconds: ""

    updateStrategy:
      type: RollingUpdate

    podRestartPolicy: Always

    containers:
      - config: {}
        name: default
        cmd: /bin/sh
        type: rest

    ports:
      - name: http
        containerPort: 8080
        protocol: TCP

    livenessProbe:
      enabled: true
      tcpSocket:
        port: 8080
      initialDelaySeconds: 30
      periodSeconds: 15

    readinessProbe:
      enabled: true
      tcpSocket:
        port: 8080
      initialDelaySeconds: 30
      periodSeconds: 15

    startupProbe:
      enabled: false

    containerSecurityContext:
      enabled: true
      runAsUser: 1000
      capabilities:
        drop:
        - ALL
      seccompProfile:
        type: "RuntimeDefault"
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      allowPrivilegeEscalation: false

    lifecycleHooks: {}

    resources:
      limits:
        cpu: "1500m"
        memory: "2048M"
      requests:
        cpu: "1000m"
        memory: "1024M"

    extraVolumes: []

    extraVolumeMounts: []

    sidecars: []

    envVars: null

    envVarsConfigMap: ""

    envVarsSecret: ""

    service:
      type: ClusterIP
      ports:
        - name: http
          protocol: TCP
          port: 8080
          targetPort: http

    serviceAccount:
      create: true

    autoscaling:
      enabled: false
      minReplicas: 3
      maxReplicas: 5
      targetCPU: 80
      targetMemory: 80
      metrics: []

    ingress:
      enabled: false

    mapping:
      enabled: false
      port: 8080
      ambassador_id: 
      - default
      rewrite: /
      hostname: ""
      prefix: ""
      timeout_ms: 3000

    topicPrefix: ""
    _topics: {}
    kafkaTopicsParameters: true

    kafkaUser:
      enabled: false
      clusterName: kafka
      clusterNamespace: strimzi
      caCertSecretName: kafka-cluster-ca-cert

    mongodb:
      dbName: ""
      host: mongodb.mongodb.svc.cluster.local
      service:
        namespace: mongodb
        name: mongodb
      

    apiBasePath: ""
    serviceName: ""
    serviceInstanceId: ""
    serviceNameConsumer: ""
    serviceInstanceIdConsumer: ""
    parameters:
      default: {}
      rest: {}
      consumer: {}

    configPrefix: ""

    enableServiceLinks: true
    
    successfulJobsHistoryLimit: 5

    environment:
      name: default

    # Set `spec` of HTTPRoute here
    httpRoute:
      enabled: false
      rules: []

    vaultAgent:
      enabled: false
      annotations:
        vault.hashicorp.com/tls-skip-verify: "false"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-init-first: "true"
        vault.hashicorp.com/agent-cache-enable: "true"
        vault.hashicorp.com/agent-pre-populate-only: "false"
        vault.hashicorp.com/agent-run-as-same-user: "true"
      role: ""
      rolePrefix: ""
      pgrepPattern: python
      secrets:
        generic: {}
        mongodb:
          enabled: false
          secretPath: ""
          connectionString: "mongodb://{{username}}:{{password}}@mongodb:27017/admin"
        service:
          enabled: false
          secretPath: ""
          pathPrefix: operational-secrets/data/unique/apps/archive
        crypt4ghInternalPub:
          enabled: false
          secretPath: "operational-secrets/data/shared/managed-keys/crypt4gh-internal"
          mountPath: /keys/crypt4gh-internal/crypt4gh.pub
          dataKey: crypt4gh.pub
          renderToFile: true
          parameterName: CRYPT4GH_PUBLIC_KEY
        crypt4ghInternalPriv:
          enabled: false
          secretPath: "operational-secrets/data/shared/managed-keys/crypt4gh-internal"
          mountPath: /keys/crypt4gh-internal/crypt4gh.sec
          dataKey: crypt4gh.sec
          renderToFile: true
          parameterName: CRYPT4GH_PRIVATE_KEY
        crypt4ghExternalPriv:
          enabled: false
          secretPath: "operational-secrets/data/shared/managed-keys/crypt4gh-external"
          mountPath: /keys/crypt4gh-external/crypt4gh.sec
          dataKey: crypt4gh.sec
          renderToFile: true
          parameterName: CRYPT4GH_PRIVATE_KEY
