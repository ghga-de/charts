name: Library Release Workflow
on:
  release:
    types:
      - published
  workflow_run:
    workflows: [Release Charts]
    types:
      - completed
  workflow_dispatch:

jobs:
  update-charts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.12.0
      
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      # New version of ruamel.yaml contains fix for https://sourceforge.net/p/ruamel-yaml/tickets/529/
      # However, this adds a trailing white space to the Chart.yaml file, which is not compatible with the linter.      
      - name: Install dependencies for scripts
        shell: bash
        run: pip install semver ruamel.yaml==0.18.12 requests
      
      - name: Add charts' dependency repositories
        shell: bash
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add ghga https://ghga-de.github.io/charts
     
      # Note: it is not easily possible to pass the version of ghga-common as an input to this workflow.
      #       Therefore, we retrieve the most recent release tag of ghga-common and use it to bump the chart versions.
      - name: Get most recent release tag
        shell: bash
        run: |
          # Ensure no action "pages build and deployment" is currently in progress
          # Not possible to do it on workflow call, so we check the status via the GitHub API
          # Otherwise it will sometimes create unnecessary pull requests
          for i in {1..10}; do
            RESPONSE=$(curl -s "https://api.github.com/repos/ghga-de/charts/actions/runs?status=in_progress")
            RUNS=$(echo "$RESPONSE" | jq '[.workflow_runs[] | select(.name == "pages build and deployment")] | length')

            if [ "$RUNS" -eq 0 ]; then
                break
            else
                echo "There are currently $RUNS in-progress runs of 'pages build and deployment'. Waiting for them to finish..."
                sleep 5
            fi
          done
          
          ghga_common=$(curl -s "https://api.github.com/repos/ghga-de/charts/releases?per_page=300" | jq -r 'map(select(.tag_name | startswith("ghga-common"))) | sort_by(.published_at) | reverse | .[0] | .tag_name')
          ghga_common_version=${ghga_common#ghga-common-}

          chart_pulled=0
          # Wait until the Helm repository is updated with the new ghga-common version
          # Not sure if this is needed anymore since we wait until all 'pages build and deployment' actions have completed
          for i in $(seq 1 10); do
              helm repo update
              echo "Attempt $i: pulling ghga/ghga-common version $CHART_VERSION..."
              if helm pull ghga/ghga-common --version "$ghga_common_version"; then
                  echo "Chart pulled successfully."
                  chart_pulled=1
                  break
              fi
              echo "Failed attempt $i. Retrying in $SLEEP_SECONDS seconds..."
              sleep 5
          done

          if [ "$chart_pulled" -eq 0 ]; then
            echo "Could not pull ghga/ghga-common version $ghga_common_version after 10 attempts."
            exit 1
          fi

          echo "Processing charts in directories: archive/ with library version $ghga_common_version"
          echo "GHGA_COMMON_VERSION=$ghga_common_version" >> $GITHUB_ENV

      - name: Bump Chart version and update dependencies
        shell: bash
        run: |
          python ./scripts/bump_charts.py --chart-dir archive/ --library-chart-version $GHGA_COMMON_VERSION

      - name: Create pull request
        uses: peter-evans/create-pull-request@v7
        with:
          add-paths: archive/
          labels: chart updates
          assignees: ckaipf
          reviewers: ckaipf
          title: Update archive charts to feature/bump-${{ env.GHGA_COMMON_VERSION }}
          commit-message: Update archive charts to feature/bump-${{ env.GHGA_COMMON_VERSION }}
          branch: feature/bump-${{ env.GHGA_COMMON_VERSION }}
          delete-branch: true
          base: main
